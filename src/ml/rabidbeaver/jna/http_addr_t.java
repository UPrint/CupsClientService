package ml.rabidbeaver.jna;
import com.sun.jna.Pointer;
import com.sun.jna.Union;
import ml.rabidbeaver.jna.MlRabidbeaverJnaLibrary.sockaddr;
import ml.rabidbeaver.jna.MlRabidbeaverJnaLibrary.sockaddr_in6;
import ml.rabidbeaver.jna.MlRabidbeaverJnaLibrary.sockaddr_in;
import ml.rabidbeaver.jna.MlRabidbeaverJnaLibrary.sockaddr_un;
/**
 * <i>native declaration : /home/adam/git/CupsClientService/jni/cups-2.0.2/cups/http.h:171</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class http_addr_t extends Union {
	/**
	 * Base structure for family value<br>
	 * C type : sockaddr
	 */
	public sockaddr addr;
	/**
	 * IPv4 address<br>
	 * C type : sockaddr_in
	 */
	public sockaddr_in ipv4;
	/**
	 * IPv6 address<br>
	 * C type : sockaddr_in6
	 */
	public sockaddr_in6 ipv6;
	/**
	 * Domain socket file<br>
	 * C type : sockaddr_un
	 */
	public sockaddr_un un;
	/**
	 * Padding to ensure binary compatibility<br>
	 * C type : char[256]
	 */
	public byte[] pad = new byte[256];
	public http_addr_t() {
		super();
	}
	/**
	 * @param addr Base structure for family value<br>
	 * C type : sockaddr
	 */
	public http_addr_t(sockaddr addr) {
		super();
		this.addr = addr;
		setType(sockaddr.class);
	}
	/**
	 * @param ipv4 IPv4 address<br>
	 * C type : sockaddr_in
	 */
	public http_addr_t(sockaddr_in ipv4) {
		super();
		this.ipv4 = ipv4;
		setType(sockaddr_in.class);
	}
	/**
	 * @param ipv6 IPv6 address<br>
	 * C type : sockaddr_in6
	 */
	public http_addr_t(sockaddr_in6 ipv6) {
		super();
		this.ipv6 = ipv6;
		setType(sockaddr_in6.class);
	}
	/**
	 * @param un Domain socket file<br>
	 * C type : sockaddr_un
	 */
	public http_addr_t(sockaddr_un un) {
		super();
		this.un = un;
		setType(sockaddr_un.class);
	}
	/**
	 * @param pad Padding to ensure binary compatibility<br>
	 * C type : char[256]
	 */
	public http_addr_t(byte pad[]) {
		super();
		if ((pad.length != this.pad.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.pad = pad;
		setType(byte[].class);
	}
	public http_addr_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends http_addr_t implements com.sun.jna.Structure.ByReference {
		
	};
	public static class ByValue extends http_addr_t implements com.sun.jna.Structure.ByValue {
		
	};
}
