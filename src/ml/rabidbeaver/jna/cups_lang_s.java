package ml.rabidbeaver.jna;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /home/adam/git/CupsClientService/jni/cups-2.0.2/cups/language.h:54</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class cups_lang_s extends Structure {
	/**
	 * Next language in cache<br>
	 * C type : cups_lang_s*
	 */
	public cups_lang_s.ByReference next;
	/** Number of times this entry has been used. */
	public int used;
	/**
	 * Text encoding<br>
	 * C type : cups_encoding_t
	 */
	public int encoding;
	/**
	 * Language/locale name<br>
	 * C type : char[16]
	 */
	public byte[] language = new byte[16];
	/**
	 * Message strings @private@<br>
	 * C type : cups_array_t*
	 */
	public PointerByReference strings;
	public cups_lang_s() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("next", "used", "encoding", "language", "strings");
	}
	/**
	 * @param next Next language in cache<br>
	 * C type : cups_lang_s*<br>
	 * @param used Number of times this entry has been used.<br>
	 * @param encoding Text encoding<br>
	 * C type : cups_encoding_t<br>
	 * @param language Language/locale name<br>
	 * C type : char[16]<br>
	 * @param strings Message strings @private@<br>
	 * C type : cups_array_t*
	 */
	public cups_lang_s(cups_lang_s.ByReference next, int used, int encoding, byte language[], PointerByReference strings) {
		super();
		this.next = next;
		this.used = used;
		this.encoding = encoding;
		if ((language.length != this.language.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.language = language;
		this.strings = strings;
	}
	public cups_lang_s(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends cups_lang_s implements Structure.ByReference {
		
	};
	public static class ByValue extends cups_lang_s implements Structure.ByValue {
		
	};
}
